---
title: "R-Programming-Part-2"
author: "KPOVIESSI OLAOLOUWA AMICHE STEPHANE"
date: "2023-09-18"
output: html_document
---

In this part of the course, we will explore Data Frames, one of the most important data structures for optimal data manipulation. The second part of the course is devoted to the data frame handling.


# Data frame 
It is the most used data structure in data science. It includes all types of data. In the same data frame, we can have variables or observations (columns) with numbers and other variables (observations) with characters (Male, Female) also Boolean types (True or False) generally represented by the digits 0 and 1.

We could have directly approached the Data Frames but for educational reasons, it is more interesting and easier to start with the vectors, the matrices then the Data Frames

In the following, we will create a new Data Frame.

```{r}
data_set_1= data.frame(c(23,25,28,29), c(45,75,52,66), c("f","h","f","h"),c(FALSE,TRUE,TRUE,FALSE))
data_set_1
```

We will now give names to rows and columns using the functions used in the manipulation of matrices.

```{r}
colnames(data_set_1)=c("age", "weight","gender"," bool")
rownames(data_set_1)=c("Elise","Sully","Anouck","Baptiste")
data_set_1
```


# Importing data files

In this section we will import the very well known iris file, available with the sent documents.

1- define your storage directory as the working directory

2-directly load the dataset from your working directory.
```{r}
setwd("F:/School JUNIA ISEN/Classes/Data Report, Visualisation/Seance 1/Courses 2")
data("iris")
View(iris)
```

```{r}
head(iris)
```


This is a dataset very well known to data scientists. Pedagogically, it is a data set with, which many concepts can be applied.
The variables are:

1-Sepal length,

2-sepal width,

3-petal length,

4-petal width

and this for 3 types of iris,

1-setosa,

2-versicolor,

3-virginica.

```{r}
data_Iris=read.table("iris.csv", header = T, sep=",", row.names = 1) #row.names permet de définir la premiére 
#View(data_Iris)
dim(data_Iris) 
```

```{r}
tail((data_Iris))
```

# Handling the data frames

The head function allows us to display the first 6 rows of our dataset.
```{r}
#data_Iris[,1:4]
head(data_Iris[,1:4])
```

If we want to display the 10th line, the 40th line and the 55th line,

```{r}
data_Iris[c(10,40,50), 1:4]
```


It is the same operating mode as the matrices. Other ways to access information at the data frame level is to use the names of the variables
```{r}
data_Iris[c(10,40,50), c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width")]
```
 
If you want to access only one column for example; here Petal.Length
```{r}
data_Iris$Petal.Length
#head(data_Iris$Petal.Length) #$permet d'acceder directement à une seule colonne a partir du jeu de données.
```
 
Now imagine that we want to select all rows of the iris species "setosa"

```{r}

dim(data_Iris[data_Iris$Species=="setosa",])
data_Iris$Species=="setosa" ##

which(data_Iris$Species=="setosa")
data_Iris[(data_Iris$Species=="setosa"),]

```

We can also do a lot of operation with which where I want the species "setosa" with sepale width "Sepal.Width" 
```{r}
dim(data_Iris[which(data_Iris$Species=="setosa"& data_Iris$Sepal.Width ==3.1 ),])
```

Another way to do this is using the very powerful% in% operator


```{r}
data_Iris$Species %in% c("setosa", "versicolor")
data_Iris[data_Iris$Species %in% c("setosa","versicolor"),]

#
```
Here %in% makes possible to select the lines which are TRUE when they correspond to the species or the requested criterion .

Another way of selecting data under certain conditions is the subset function:

```{r}
?subset
```


```{r}
iris_subset1 = subset(data_Iris, Species == "setosa" & Sepal.Width ==3.1)
iris_subset1
```
If we want another data frame without the information about Species and Sepal.Width, we can take the previous code and add conditions using the select function of the subset function:

```{r}
iris_subset_setosa1 = subset(data_Iris, Species == "setosa" & Sepal.Width ==3.1,select=c("Sepal.Length","Petal.Length","Petal.Width"))
iris_subset_setosa1
```


# Factor data type
Factor is a type of data that characterizes qualitative modalities.
For example, in a data set, a column of the sex of individuals is often characterized by the modalities "m" for male or "f" for female.
In the example of the Iris dataset, the Species column is of type Factor.

```{r}
class(data_Iris$Species)
head(data_Iris$Species)
```
Here, levels indicate the modalities of the species. This means that in our dataset we have 3 types of irises, the setosa, versicolor and virginica.

If you want to modify the names of the lines instead of having 1,2,3 ... having iris 1, iris 2, iris 3, ... for this we can use the paste function
```{r}
rownames(data_Iris)= paste("iris", rownames(data_Iris), sep=" ")
data_Iris

```

we can also do a small statistic regarding the Iris file with the summury function:
```{r}
summary(data_Iris)
```
As we can notice it, for the modality or the column Species, in there is no information concerning the min or the max like the other columns. This is normal since Spicies gives character type information.


We are now going to do some manipulations that will allow us to access information.
For example, oe wants to know for the type of species virginica, the smallest length of sepal

```{r}
min(data_Iris[data_Iris$Species=="virginica","Sepal.Length"])
mean(data_Iris[data_Iris$Species=="virginica",1])
max(data_Iris[data_Iris$Species=="virginica",1])
```

```{r}
min(data_Iris[data_Iris$Species=="setosa",1])
mean(data_Iris[data_Iris$Species=="setosa",1])
max(data_Iris[data_Iris$Species=="setosa",1])
```

```{r}
min(data_Iris[data_Iris$Species=="versicolor",1])
mean(data_Iris[data_Iris$Species=="versicolor",1])
max(data_Iris[data_Iris$Species=="versicolor",1])
```

Another remark in the handling of data frames:
If, for example, we want to create a new data frame from our iris data set, for example we will select that the qualitative variable part hopefully: 
```{r}
data_iris_qualitative = data_Iris[,5]

```

The problem is that R will consider it as a factor instead of considering it as a data frame. This will complicate our operations if, for example, we want to group it with a data frame.
To remedy :
```{r}
data_iris_qualitative =as.data.frame(data_Iris[,5])
data_iris_qualitative
```

Here we notice that we no longer have the names of the lines that we created previously. To remedy this, we are going to redo the same operations that we saw in a previous cours:
```{r}
rownames(data_iris_qualitative)= paste("iris", rownames(data_iris_qualitative), sep=" ")
colnames(data_iris_qualitative)=c("Spicies")
data_iris_qualitative
```


Now, we are going to create another dataframe but with rather numerical values from the Iris data set.

```{r}
data_iris_quantitative = data_Iris[,c(1:4)]
data_iris_quantitative
```

We now want to group the two data frames that we have just created.
For that, we use several functions, the first one is merge:

We can look in the help for merge functionality

```{r}
?merge
```

merge will actually match each row of the first data frame with the corresponding row of the second data frame.

```{r}
data_iris_complet = merge(data_iris_quantitative, data_iris_qualitative, by="row.names")
data_iris_complet
rownames(data_iris_complet)=data_iris_complet[,1]
data_iris_complet=data_iris_complet[,-1]
```

Other ways to merge cbind and rbind

```{r}
cbind(data_iris_quantitative,data_iris_qualitative)
rbind(data_Iris,data_Iris)
dim(rbind(data_Iris,data_Iris))
```

##Logic Operators
We'll start with the comparisons:
###<strict lower
```{r}
3<4 
2<4 
4<2
4<3
```

###>strict superior
```{r}
3>4 
2>4 
4>2
4>3
```

#greater than or equal to
What you need to know is that
```{r}
4>=3 #4 is always greater than or equal to 3.
100>=2 # 100 is always greater than or equal to 2 no matter what

```
# less or equal
```{r}
3<=4
2<=100
```

As we will see later, the <= or> = operators are generally used for what is called incrementing in a loop.

#operator & and &&
It is the operator which means "AND" in logic.
We can for example consider two propositions here.
R will send us back, TRUE for the first and FALSE for the second.
Since for the operator AND &, if one of the propositions is false then the set is false.
Be careful to use && or & since they do not give the same result.

```{r}
1<=2 & 1<=3
1<=2 && 1<=3 # & or && have no impact

c(2,2)==c(2,2) & c(3,3)==c(3,3) #it will compare the values of each vector
c(2,2)==c(2,2) & c(3,3)==c(3,2) #he compared the values of each vector and he indicates that there is a problem since 3 == 2 is false.

c(2,2)==c(2,2) && c(3,3)==c(3,3) 
c(2,2)==c(2,2) && c(3,3)==c(3,2) # in this example, the && operator will only compare the first values of each vector which returns a TRUE response or it is FALSE. Be careful when handling &&
```

#OR operator | || also called pipeline.

```{r}
1<=2 | 1>=3
1<=2 || 1>=3 # one of the two propositions must be TRUE.

c(2,2)==c(2,2) | c(3,3)==c(3,3)
c(2,2)==c(2,2) || c(3,3)==c(3,3)

c(2,2)==c(2,2) | c(3,3)==c(2,2)
c(2,2)==c(2,2) || c(3,3)==c(2,2)

```

#The statements of the if condition
if(condition){
action 1
} else {
action 2
}
```{r}
if(3<=4 & 10==10){
  print("super action 1")
} else {
  print("not super, then action 2")
}
```

```{r}
if(3<=4 & 10== 11){
  print("super action 1")
} else {
  print("not super, then action 2")
}
```


```{r}
if(3 <=4 | 10== 11){
  print("super action 1")
} else {
  print("not super, then action 2")
}
```


```{r}
if(3 >4 | 10== 11){
  print("super action 1")
} else {
  print("not super, then action 2")
}
```

#For loop which means for.
  Here is the structure of this loop: This loop has as action is iteration, at each step, there is either an incrementation, increase in value or a decrement, decrease in value
  
 for (condition){
 action 
 }
At the level of the condition, we can define for example the condition of the following faon: value in vector
 
```{r}
for (variable in c(1,2,3,4,5,6)) {
print(variable+1)  

}
```
 
 In this piece of code, the variable takes the value 1, from the vector and adds a 1 to it then displays it, it takes the value 2 of the vector and adds 1 to it and displays it
 
```{r}
for (variable in c(0:6)) {
print(variable+1)  

}
```

We can do other operations on the For loop:

```{r}
for (variable in c(1,2,3,4,5,6)) {
print(paste("Digit number : ", variable))  

}
```

```{r}
for (variable in c(0:6)) {
variable1= variable+1 
if(variable1<=4){
  print("I am in condition 1")
  print(variable1)
  
} else {
  print("I am in condition 2")
  print(variable1)
  
}
}
```


#while statement is equivalent to a for loop and an if loop.
As long as a while condition is true, the action is executed.
It is important to note that an initialization phase is important to define the condition.

```{r}
value = 0
while (value <=4) {
value = value +1
print(value)
}
```

As we can see in this example, this loop showed us the values from 1 to 5. This is a bit of a danger with the while statement. Here when the value equals 4, it still checks the while condition (value <= 4) which implies that the heart of the instruction is checked, so value is incremented by 1 and we display 5.

If we simply want values from 1 to 4, it is therefore necessary to handle the condition well in the while.

```{r}
value = 0
while (value <4) {
value = value +1
print(value)
}
```


##Exercise
We are going to resume our exercise concerning the irises.
Here we want to browse the iris dataset and ask R to make the iris number compatible with certain specificities.
So starting by browsing the vector "Species"

```{r}
number_versicolor= 0
number_setosa=0
number_virginica =0
for(espece in data_Iris$Species ){
  if(espece == "versicolor"){
    number_versicolor= number_versicolor+1
  }
  if(espece =="setosa")
    number_setosa=number_setosa+1
  
  if (espece =="virginica")
  number_virginica=number_virginica+1
}
print(paste("number of versicolor ", number_versicolor))
print(paste("number of setosa ", number_setosa))
print(paste("number of virginica ", number_virginica))
```

```{r}
number_versicolor= 0
number_setosa=0
number_virginica =0
for(espece in data_Iris$Species ){
  if(espece == "versicolor"){
    number_versicolor= number_versicolor+1
  } else
  if(espece =="setosa"){
    number_setosa=number_setosa+1
  }
  else{
  number_virginica=number_virginica+1
  }
}
print(paste("number of versicolor ", number_versicolor))
print(paste("number of setosa ", number_setosa))
print(paste("number of virginica ", number_virginica))
```

Another example to explore a data frame, for example, we want to count for this time, the irises that have a petal length greater than 4
We are going to initialize as we had previously seen our counter

```{r}
counter_petal_4 =0
for (length in data_Iris$Petal.Length){
  if(length >=4){
    counter_petal_4=counter_petal_4+1
  }
}
counter_petal_4
```

If, for example, we want to browse the lines of a data frame:
first question how many lines do we have ? 
to find out, let's look at the dim function
```{r}
dim(data_Iris)
```

```{r}
(dim(data_Iris))[1]
```
I want to go from the first line to the last line which I will find thanks to the previous instruction.

```{r}
for (ligne in 1:dim(data_Iris)[1]){
  specimen = data_Iris[ligne,]
print(specimen)}

```

Here, each row or each specimen value, we get a data frame. 
```{r}
counter_setosa_petal_5=0
for (ligne in 1:dim(data_Iris)[1]){
  specimen = data_Iris[ligne,]
if (specimen$Species =="setosa" & specimen$Sepal.Length >=5){
  counter_setosa_petal_5=counter_setosa_petal_5+1
}
}
print(counter_setosa_petal_5)

```

In this part we will go through the columns.

```{r}
for (colonne in 1:dim(data_Iris)[2]){
  specimen = data_Iris[,colonne]
  print(specimen)
  print("********************")
}

```


###Functions
We will end this part with the writing of the functions.
As we had seen before, there are functions predefined on R. Each function has its specificity.
Now if we want to define a function that will allow us to do particular actions
Here is the structure of the function:

name_function =function(argument1, argument2,....etc){
   conditions and instructions
   bloc of code
   return (result)
}

We will illustrate this with an example that we covered in the previous video.

```{r}
number_specimen_Petal_4= function(dataframe){
counter_petal_4 =0
for (length in dataframe$Petal.Length){
  if(length >=4){
    counter_petal_4=counter_petal_4+1
  }
}
return(counter_petal_4)
}
number_specimen_Petal_4(data_Iris)
```

Functions have many useful uses when coding.

For example, real estate data files often have the same structure.
Having pre-defined functions to have information quickly is very useful when you want to do a study.
It's easier to call the function we generated instead of rewriting the code.

Another example, we want to know the smallest values of each species.

```{r}
mean_specimen=function(dataframe){
  mean_setosa= colMeans(subset(data_Iris, dataframe$Species=="setosa")[,-5])
 
}
  mean_setosa
```

```{r}
mean_specimen=function(dataframe){
  mean_setosa= colMeans(subset(data_Iris, dataframe$Species=="setosa")[,-5])
 mean_virginica= colMeans(subset(data_Iris, dataframe$Species=="virginica")[,-5])
  mean_versicolor= colMeans(subset(data_Iris, dataframe$Species=="versicolor")[,-5])
  tableau_mean=data.frame(Setosa=mean_setosa, Virginica=mean_virginica, Versicolor= mean_versicolor)
  return(tableau_mean)
}
mean_specimen(data_Iris)
```



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.

step =0.02),
plotOutput("plotlabel"))
server <-function(input, output){
output$plotlabel <- renderPlot({
filter(sleep,
`Avg hrs per day sleeping` >= input$sliderlabel[1],
`Avg hrs per day sleeping` <= input$sliderlabel[2])%>%
ggplot()+
geom_boxplot(aes(x=`Avg hrs per day sleeping`))
})
}
shinyApp(ui, server)
# Define UI for app that includes a slider and plot output
ui <- fluidPage(
# Add an application title
titlePanel("Sleeping habits in America"),
# Create a slider input with an icon
# We're using the 'icon' function to add a bed icon to the slider input for visual appeal
sliderInput("sliderlabel",
list(icon("bed")),  # Adding a bed icon next to the slider label
min=7.5,            # The minimum value of the slider
max=11,             # The maximum value of the slider
value =c(7.5,11),   # Default value set to the range of the slider
step =0.02),        # The step increment of the slider
# Define a plot output UI element
plotOutput("plotlabel")
)
# Define server logic required to render the plot based on slider input
server <-function(input, output){
# Render plot based on the input from the slider
output$plotlabel <- renderPlot({
# Filter the 'sleep' data based on the slider values
filter(sleep,
`Avg hrs per day sleeping` >= input$sliderlabel[1],
`Avg hrs per day sleeping` <= input$sliderlabel[2]) %>%
ggplot() +
# Create a boxplot of the average hours per day sleeping
geom_boxplot(aes(x=`Avg hrs per day sleeping`))
})
}
# Create a Shiny app object that consists of UI and server components
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleeping habits in America"),
# Add textInput and label it as "city label"
textInput("city label",
"Which city do you live in?",
# Leave the value blank and set the placeholder as "Singapore"
value = "", placeholder = "Singapore"))
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleeping habits in America"),
textInput("city label",
"Which city do you live in?",
value = "", placeholder = "Singapore"),
# Add textOutput and label it as "textoutput"
textOutput("textouput"))
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleeping habits in America"),
textInput("city label",
"Which city do you live in?",
value = "", placeholder = "Singapore"),
textOutput("textoutput"))
server <- function(input, output) {
# Define the text output
output$textoutput <- renderText(paste0(
"Sleep deprivation is a serious health issue in many major cities around the world, for example ",
input$`city label`,"."))
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleeping habits in America"),
# Place a selectInput with two choices, "Plot" and "Table"
selectInput("choice", "Choose an output",
choices = c("Plot", "Table")),
# Place plot and table outputs called "plot" and "table"
plotOutput("plot"), tableOutput("table"))
server <- function(input, output) {
# Add renderPlot
output$plot <- renderPlot({
if(input$choice == "Plot") p
})
# Add renderTable
output$table <- renderTable({
if(input$choice == "Table") sleep
}) }
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleeping habits in America"),
# Place a selectInput with two choices, "Plot" and "Table"
selectInput("choice", "Choose an output",
choices = c("Plot", "Table")),
# Place plot and table outputs called "plot" and "table"
plotOutput("plot"), tableOutput("table"))
server <- function(input, output) {
# Add renderPlot
output$plot <- renderPlot({
if(input$choice == "Plot") p
})
# Add renderTable
output$table <- renderTable({
if(input$choice == "Table") sleep
}) }
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Sleeping habits in America"),
fluidRow(
# Place two plots here, called "histogram" and "barchart"
mainPanel(c("histogram"), c("barchart")),
inputPanel(sliderInput("binwidth",
label = "Bin width",
min = 0.1, max = 2,
step = 0.01, value=0.25),
checkboxGroupInput("days", "Choose types of days:",
# Replace the list elements with icons called "calendar", "briefcase" and "gift"
choiceNames = list("All days",
"Non-holiday weekdays",
"Weekend days/holidays"),
choiceValues = list("All days",
"Nonholiday weekdays",
"Weekend days and holidays"))),
"In general, across the different age groups, Americans seem to get adequate daily rest." ))
server <- function(input, output, session) {
# Define the histogram and barchart
output$histogram <- renderPlot({
ggplot(sleep, aes(x=`Avg hrs per day sleeping`)) +
geom_histogram(binwidth = input$binwidth, col='white') +
theme_classic()
})
output$barchart <- renderPlot({
filter(sleep, `Type of Days` %in% input$days) %>%
group_by(`Type of Days`, `Age Group`) %>%
summarize(`Median hours` = median(`Avg hrs per day sleeping`)) %>%
ggplot(aes(x = `Median hours`, y = `Age Group`, fill = `Type of Days`)) +
geom_col(position = 'dodge') + theme_classic()
})
}
# Use shinyApp() to render the shinyApp
ui <- fluidPage(
titlePanel("Sleeping habits in America"),
fluidRow(
# Place two plots here, called "histogram" and "barchart"
mainPanel(c("histogram"), c("barchart")),
inputPanel(sliderInput("binwidth",
label = "Bin width",
min = 0.1, max = 2,
step = 0.01, value=0.25),
checkboxGroupInput("days", "Choose types of days:",
# Replace the list elements with icons called "calendar", "briefcase" and "gift"
choiceNames = list("All days",
"Non-holiday weekdays",
"Weekend days/holidays"),
choiceValues = list("All days",
"Nonholiday weekdays",
"Weekend days and holidays"))),
"In general, across the different age groups, Americans seem to get adequate daily rest." ))
server <- function(input, output, session) {
# Define the histogram and barchart
output$histogram <- renderPlot({
ggplot(sleep, aes(x=`Avg hrs per day sleeping`)) +
geom_histogram(binwidth = input$binwidth, col='white') +
theme_classic()
})
output$barchart <- renderPlot({
filter(sleep, `Type of Days` %in% input$days) %>%
group_by(`Type of Days`, `Age Group`) %>%
summarize(`Median hours` = median(`Avg hrs per day sleeping`)) %>%
ggplot(aes(x = `Median hours`, y = `Age Group`, fill = `Type of Days`)) +
geom_col(position = 'dodge') + theme_classic()
})
}
# Use shinyApp() to render the shinyApp
shinyApp(ui, server)
library(shinydashboard)
# Create the dashboard header with the title 'My first dashboard'
header <- dashboardHeader(
title = "My first dashboard"
)
# Create the dashboard sidebar (this would be where you put input controls if needed)
sidebar <- dashboardSidebar()
# Create an empty dashboard body (content will go here)
body <- dashboardBody()
# Assemble the UI using the dashboardPage function, with the header, sidebar, and body
ui <- dashboardPage(
header,
sidebar,
body
)
# Define an empty server function (logic for the app will go here)
server <- function(input, output) {}
# Launch the Shiny app with the defined UI and server
shinyApp(ui, server)
soccer <-read_csv("soccer18-19.csv")
soccer %>% head()
# Set the title of the shinydashboard
header <- dashboardHeader(title = "Global soccer tournament")
# Set up an empty side bar
sidebar <- dashboardSidebar()
# Set up an empty body
body <- dashboardBody()
# Set up the shinydashboard UI
ui <- dashboardPage(
header,
sidebar,
body
)
server <- function(input, output) {
}
shinyApp(ui, server)
# Import the necessary shinydashboard library
library(shinydashboard)
# The header acts like the restaurant's sign, giving identity to the dashboard
header <- dashboardHeader(
title = "Analysis for FIFA world cup", # Title is analogous to the name on a restaurant's signboard
titleWidth = 300,  # Width of the title area
dropdownMenu(type = "messages",    # Dropdown menu for additional interactions like notifications
messageItem("Data division", "Keep up the good work!",
time = "5 mins")))
# The sidebar is like the menu of a restaurant, listing navigation options and tools
sidebar <- dashboardSidebar() # An empty sidebar, similar to a menu with sections for different pages or tools
# The body is akin to the main dining area of a restaurant, where content is displayed
body <- dashboardBody() # An empty body, ready to display main content like charts, tables, etc.
# Set up the shinydashboard UI
ui <- dashboardPage(header, sidebar, body) # Assembling the dashboard with its components
# The server function activates the dashboard, similar to how staff bring a restaurant to life
server <- function(input, output) {
# This is where server-side operations and reactive outputs will be defined
}
# The shinyApp function combines the UI and server to launch the dashboard, just as the front and back of house come together to open a restaurant
shinyApp(ui, server)
# Import the necessary shinydashboard library
library(shinydashboard)
# The header acts like the restaurant's sign, giving identity to the dashboard
header <- dashboardHeader(
title = "Analysis for FIFA world cup", # Title is analogous to the name on a restaurant's signboard
titleWidth = 300,  # Width of the title area
dropdownMenu(type = "messages",    # Dropdown menu for additional interactions like notifications
messageItem("Data division", "Keep up the good work!",
time = "5 mins")))
# The sidebar is like the menu of a restaurant, listing navigation options and tools
sidebar <- dashboardSidebar() # An empty sidebar, similar to a menu with sections for different pages or tools
# The body is akin to the main dining area of a restaurant, where content is displayed
body <- dashboardBody() # An empty body, ready to display main content like charts, tables, etc.
# Set up the shinydashboard UI
ui <- dashboardPage(header, sidebar, body) # Assembling the dashboard with its components
# The server function activates the dashboard, similar to how staff bring a restaurant to life
server <- function(input, output) {
# This is where server-side operations and reactive outputs will be defined
}
# The shinyApp function combines the UI and server to launch the dashboard, just as the front and back of house come together to open a restaurant
shinyApp(ui, server)
# Define the dashboard header
header <- dashboardHeader(
title ="Analysis for global soccer tournament",  # Set the title of the dashboard
titleWidth =400,  # Adjust the width of the title to 400 pixels
# Add a dropdown menu for messages within the header
dropdownMenu(type ="messages",
# First message item with a custom title and time
messageItem("Data division","Keep up the good work!",
time ="5 mins"),
# Second message item related to Twitter with its own icon and timestamp
messageItem("Twitter","You have a Tweet!",
time ="1 hour", icon=icon("twitter")))
)
# Initialize the dashboard sidebar (this is empty for now)
sidebar <- dashboardSidebar()
# Set up an empty body for the dashboard
body <- dashboardBody()
# Configure the UI of the shinydashboard using the header, sidebar, and body components
ui <- dashboardPage(header, sidebar, body)
# Define a server function (this is empty for now)
server <- function(input, output) {
# Server-side code would go here
}
# Create the shiny app with the defined UI and server
shinyApp(ui, server)
#install.instapackages("shiny")
#install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
library(dplyr)
library(ggplot2)
library(tidyverse)
setwd("F:/PRO/School JUNIA ISEN/Classes/Data Report, Visualisation/Courses 7")
library(tidyverse)
sleep <-read_csv("Time Americans Spend Sleeping.csv")
sleep %>% head()
library(shiny)
ui<-fluidPage(titlePanel("Your first App ;-"))
server <- function(input, output) {
}
shinyApp(ui, server)
soccer %>% head()
# Define the dashboard header
header <- dashboardHeader(
title ="Analysis for global soccer tournament",  # Set the title of the dashboard
titleWidth =400,  # Adjust the width of the title to 400 pixels
# Add a dropdown menu for messages within the header
dropdownMenu(type ="messages",
# First message item with a custom title and time
messageItem("Data division","Keep up the good work!",
time ="5 mins"),
# Second message item related to Twitter with its own icon and timestamp
messageItem("Twitter","You have a Tweet!",
time ="1 hour", icon=icon("twitter")))
)
# Initialize the dashboard sidebar (this is empty for now)
sidebar <- dashboardSidebar()
# Set up an empty body for the dashboard
body <- dashboardBody()
# Configure the UI of the shinydashboard using the header, sidebar, and body components
ui <- dashboardPage(header, sidebar, body)
# Define a server function (this is empty for now)
server <- function(input, output) {
# Server-side code would go here
}
# Create the shiny app with the defined UI and server
shinyApp(ui, server)
# Define the dashboard header with a title and a specified width
header <- dashboardHeader(
title = "Analysis for global soccer tournament",
titleWidth = 400,
# Adding a dropdown menu with various message items
dropdownMenu(type = "messages",
# Adding a message item for data division encouragement
messageItem("Data division", "Keep up the good work!",
time = "5 mins"),
# Adding a Twitter message item with a custom icon
messageItem("Twitter", "You have a Tweet!",
time = "1 hour", icon = icon("twitter")),
# Adding a generic notification item
notificationItem("This is a notification."),
# Adding a task item with a progress bar
taskItem(value = 30, color = "blue", "Dashboard construction")
),
# Adding another dropdown menu for notifications
dropdownMenu(type = "notifications",
# Adding a user notification with a custom icon
notificationItem(icon = icon("users"), "This is another notification.")
)
)
# Define an empty dashboard sidebar
sidebar <- dashboardSidebar()
# Define an empty dashboard body
body <- dashboardBody()
# Define the UI for a shinydashboard with header, sidebar, and body
ui <- dashboardPage(header, sidebar, body)
# Define an empty server logic for the shiny app
server <- function(input, output) {
# Server logic goes here
}
# Combine the UI and server to build the shiny app
shinyApp(ui, server)
# Define the dashboard header
header <- dashboardHeader(
# Set the title of the dashboard and its width
title = "Analysis for global soccer tournament",
titleWidth = 400,
# Add a dropdown menu for messages with custom items
dropdownMenu(type = "messages",
# Add a message regarding data division with a timestamp
messageItem("Data division", "Keep up the good work!",
time = "5 mins"),
# Add a message from Twitter with an associated icon and timestamp
messageItem("Twitter", "You have a Tweet!",
time = "1 hour", icon = icon("twitter")),
# Add a generic notification item
notificationItem("This is a notification."),
# Add a task item with a progress bar
taskItem(value = 30, color = "blue", "Dashboard construction")),
# Add another dropdown menu for notifications
dropdownMenu(type = "notifications",
# Include a notification with a users icon
notificationItem(icon = icon("users"), "This is another notification."))
)
# Define the dashboard sidebar
sidebar <- dashboardSidebar(width = 400,
# Set up a sidebar menu with IDs for page management
sidebarMenu(
id = "pages",
# Add a menu item for charts with an icon, badge label, and color
menuItem("Many charts", tabName = "charts",
icon = icon("chart-line"),
badgeLabel = "New content!",
badgeColor = "green"),
# Add a menu item for statistics with an icon, badge label, and color
menuItem("Statistics", icon = icon("file-excel"),
tabName = "stats",
badgeLabel = "urgent",
badgeColor = "red"))
)
# Initialize an empty body for the dashboard
body <- dashboardBody()
# Set up the shinydashboard UI with the defined header, sidebar, and body
ui <- dashboardPage(header, sidebar, body)
# Define a placeholder server function, no operations defined yet
server <- function(input, output) {
}
# Launch the shiny app with the UI and server components
shinyApp(ui, server)
# Define the dashboard header with title and dropdown menus for messages and notifications
header <- dashboardHeader(
title = "Analysis for global soccer tournament",
titleWidth = 400,
dropdownMenu(type = "messages",
messageItem("Data division", "Keep up the good work!", time = "5 mins"),
messageItem("Twitter", "You have a Tweet!", time = "1 hour", icon = icon("twitter")),
notificationItem("This is a notification."),
taskItem(value = 30, color = "blue", "Dashboard construction")),
dropdownMenu(type = "notifications",
notificationItem(icon = icon("users"), "This is another notification."))
)
# Define the dashboard sidebar with width and menu items, including checkboxes as input
sidebar <- dashboardSidebar(width = 400,
sidebarMenu(
id = "pages",
menuItem("Many charts", tabName = "charts",
icon = icon("chart-line"),
badgeLabel = "New content!",
badgeColor = "green"),
menuItem("Statistics", icon = icon("file-excel"),
tabName = "stats",
menuSubItem("Team 1", tabName = "team1", icon = icon("user")),
menuSubItem("Team 2", tabName = "team2", icon = icon("user"))),
menuItem("A couple of checkboxes",
# Insert checkboxes into the sidebar for user interaction
checkboxGroupInput("checkboxes", "Day of the week",
choices = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"),
selected = c("Mon", "Tue", "Wed", "Thu", "Fri"))
)
))
# Define an empty dashboard body
body <- dashboardBody()
# Define the shinydashboard UI with the above header, sidebar, and body
ui <- dashboardPage(header, sidebar, body)
# Define a server function that will handle server-side logic and outputs
server <- function(input, output) {
# Server logic would go here
}
# Create the shiny app with the UI and server defined above
shinyApp(ui, server)
header <- dashboardHeader(
# Set the title as "Analysis results for global soccer tournament"
title = "Analysis results for global soccer tournament",
# Set the title width to 400
width = 400,
# Add a dropdown menu containing two messages
dropdownMenu(type = "message",
messageItem("Colleague", "Hello world!")),
# Add another dropdown menu containing two other items
dropdownMenu(type = "notification",
notificationItem("Have you rested today?"),
notificationItem("Dashboard completion", value = 20)))
header <- dashboardHeader(
# Set the title as "Analysis results for global soccer tournament"
title = "Analysis results for global soccer tournament",
# Set the title width to 400
width = 400,
# Add a dropdown menu containing two messages
dropdownMenu(type = "message",
messageItem("Colleague", "Hello world!")),
# Add another dropdown menu containing two other items
dropdownMenu(type = "notifications",
notificationItem("Have you rested today?"),
notificationItem("Dashboard completion", value = 20)))
header <- dashboardHeader(
# Set the title as "Analysis results for global soccer tournament"
title = "Analysis results for global soccer tournament",
# Set the title width to 400
titlewidth = 400,
# Add a dropdown menu containing two messages
dropdownMenu(type = "messages",
messageItem("Colleague", "Hello world!")),
# Add another dropdown menu containing two other items
dropdownMenu(type = "notifications",
notificationItem("Have you rested today?"),
notificationItem("Dashboard completion", value = 20)))
header <- dashboardHeader(
# Set the title as "Analysis results for global soccer tournament"
title = "Analysis results for global soccer tournament",
# Set the title width to 400
titlewidth = 400,
# Add a dropdown menu containing two messages
dropdownMenu(type = "messages",
messageItem("Colleague", "Hello world!")),
# Add another dropdown menu containing two other items
dropdownMenu(type = "notifications",
notificationItem("Have you rested today?"),
taskItem("Dashboard completion", value = 20)))
header <- dashboardHeader(
# Set the title as "Analysis results for global soccer tournament"
title = "Analysis results for global soccer tournament",
# Set the title width to 400
titleWidth = 400,
# Add a dropdown menu containing two messages
dropdownMenu(type = "messages",
messageItem("Colleague", "Hello world!")),
# Add another dropdown menu containing two other items
dropdownMenu(type = "notifications",
notificationItem("Have you rested today?"),
taskItem("Dashboard completion", value = 20))
)
sidebar <- dashboardSidebar();
body <- dashboardBody()
ui <- dashboardPage(header, sidebar, body);
server <- function(input, output){}
shinyApp(ui, server)
